create table Account ( google_id	varchar(25), primary key (google_id), email		varchar(50)		unique	not null, f_name		varchar(15), L_name		varchar(15), role_		varchar(10)		Default('guest')	not null );create table Instructor ( ins_id		int, google_id	varchar(25), primary key (ins_id), foreign key (google_id) references Account  ON UPDATE CASCADE );create table PAdmin ( admin_id	int, google_id	varchar(25)		not null, primary key (admin_id), foreign key (google_id) references Account  ON UPDATE CASCADE );create table Student ( student_id	int, google_id	varchar(25)		not null, primary key (student_id), foreign key (google_id) references Account  ON UPDATE CASCADE );create table privileges ( admin_id	int, priv		varchar(15), primary key (admin_id,priv), foreign key (admin_id) references PAdmin  ON UPDATE CASCADE );create table department ( dp_id	varchar(10), dp_name	varchar(50) unique not null, manager_id	int, primary key	(dp_id), foreign key (manager_id) references Instructor  ON UPDATE CASCADE );create table Course ( course_id varchar(8), course_name varchar(50), dp_id	varchar(10), primary key (course_id), foreign key (dp_id) references department ON DELETE set NULL  ON UPDATE CASCADE );create table Section ( sec_year int, semester	varchar(6), section_id	int, course_id	varchar(8), ins_id		int, primary key(sec_year,semester,section_id,course_id), foreign key (ins_id) references instructor  ON UPDATE NO Action , foreign key (course_id) references Course  ON UPDATE CASCADE );create table Rates ( sec_year	int, semester	varchar(6), section_id	int, course_id	varchar(8), student_id	int, a1			int, a2			int, a3			int, primary key (sec_year,semester,section_id,course_id,student_id), foreign key (sec_year,semester,section_id,course_id) references section ON DELETE CASCADE ON UPDATE CASCADE, foreign key (student_id) references student );create table survey ( sec_year	int, semester	varchar(6), section_id	int, course_id	varchar(8), q_num		int, q			varchar(200)	not null, primary key (sec_year,semester,section_id,course_id,q_num), foreign key (sec_year,semester,section_id,course_id) references section ON DELETE CASCADE ON UPDATE CASCADE );create table answers ( sec_year	int, semester	varchar(6), section_id	int, course_id	varchar(8), q_num		int, student_id	int, answer		varchar(500)	not null, primary key (sec_year,semester,section_id,course_id,q_num,student_id), foreign key (sec_year,semester,section_id,course_id,q_num) references survey ON DELETE CASCADE ON UPDATE CASCADE, foreign key (student_id) references student ON UPDATE NO Action );create table comment ( comment_id varchar(15), sec_year	int					not null, semester	varchar(6)			not null, section_id	int					not null, course_id	varchar(8)			not null, student_id	int					not null, archived	int		default(0)	not null, num_reports int		default(0)	not null, num_upvotes	int		default(0)	not null, comment		varchar(500)		not null, primary key (comment_id), foreign key (sec_year,semester,section_id,course_id) references section ON DELETE CASCADE ON UPDATE CASCADE, foreign key (student_id) references student ON UPDATE NO Action );create table upvote ( comment_id varchar(15), student_id	int, primary key (comment_id,student_id), foreign key (student_id) references student ON UPDATE NO Action, foreign key (comment_id) references comment ON DELETE CASCADE ON UPDATE CASCADE );create table report ( comment_id varchar(15), student_id	int, primary key (comment_id,student_id), foreign key (student_id) references student ON UPDATE NO Action, foreign key (comment_id) references comment ON DELETE CASCADE ON UPDATE CASCADE );INSERT INTO Account VALUES ('110381856419370548597','s-ramy.maged@zewailcity.edu.eg','Ramy','Maged','student');INSERT INTO Student VALUES (201900961,'110381856419370548597');INSERT INTO department (dp_id,dp_name)VALUES ('1','CIE');INSERT INTO department (dp_id,dp_name)VALUES ('2','MATH');INSERT INTO department (dp_id,dp_name)VALUES ('3','PHYS');INSERT INTO Course VALUES ('CIE202','Fundamentals of Computer Programing','1');INSERT INTO Course VALUES ('CIE227','Signals and Systems','1');INSERT INTO Course VALUES ('CIE205','Data Structures and Algorithem Analysis','1');INSERT INTO Course VALUES ('CIE212','Introduction to Electronics','1');INSERT INTO Course VALUES ('MATH101','Calculus I','2');INSERT INTO Course VALUES ('MATH102','Calculus II','2');INSERT INTO Course VALUES ('MATH201','Linear Algebra and Vector Geometry','2');INSERT INTO Section (sec_year,semester,section_id,course_id)VALUES (2019,'Fall',1,'CIE202'); INSERT INTO Section (sec_year,semester,section_id,course_id)VALUES (2020,'Spring',1,'CIE202'); INSERT INTO Section (sec_year,semester,section_id,course_id) VALUES (2019,'Fall',1,'CIE227'); INSERT INTO Section (sec_year,semester,section_id,course_id) VALUES (2020,'Spring',1,'CIE227'); INSERT INTO Section (sec_year,semester,section_id,course_id) VALUES (2019,'Fall',1,'CIE205'); INSERT INTO Section (sec_year,semester,section_id,course_id) VALUES (2020,'Spring',1,'CIE205'); INSERT INTO Section (sec_year,semester,section_id,course_id) VALUES (2019,'Fall',1,'CIE212'); INSERT INTO Section (sec_year,semester,section_id,course_id) VALUES (2020,'Spring',1,'CIE212'); INSERT INTO Section (sec_year,semester,section_id,course_id) VALUES (2019,'Fall',1,'MATH101'); INSERT INTO Section (sec_year,semester,section_id,course_id) VALUES (2020,'Spring',1,'MATH101'); INSERT INTO Section (sec_year,semester,section_id,course_id) VALUES (2019,'Fall',1,'MATH102'); INSERT INTO Section (sec_year,semester,section_id,course_id) VALUES (2020,'Spring',1,'MATH102'); INSERT INTO Section (sec_year,semester,section_id,course_id) VALUES (2019,'Fall',1,'MATH201'); INSERT INTO Section (sec_year,semester,section_id,course_id)VALUES (2020,'Spring',1,'MATH201');   INSERT INTO survey VALUES (2019,'Fall',1,'CIE202',1,'What is the problems you see in this course??'); INSERT INTO survey VALUES (2020,'Spring',1,'CIE202',1,'What is the problems you see in this course??'); INSERT INTO survey VALUES (2019,'Fall',1,'CIE227',1,'What is the problems you see in this course??'); INSERT INTO survey VALUES (2020,'Spring',1,'CIE227',1,'What is the problems you see in this course??'); INSERT INTO survey VALUES (2019,'Fall',1,'CIE205',1,'What is the problems you see in this course??'); INSERT INTO survey VALUES (2020,'Spring',1,'CIE205',1,'What is the problems you see in this course??'); INSERT INTO survey VALUES (2019,'Fall',1,'CIE212',1,'What is the problems you see in this course??'); INSERT INTO survey VALUES (2020,'Spring',1,'CIE212',1,'What is the problems you see in this course??'); INSERT INTO survey VALUES (2019,'Fall',1,'MATH101',1,'What is the problems you see in this course??'); INSERT INTO survey VALUES (2020,'Spring',1,'MATH101',1,'What is the problems you see in this course??'); INSERT INTO survey VALUES (2019,'Fall',1,'MATH102',1,'What is the problems you see in this course??'); INSERT INTO survey VALUES (2020,'Spring',1,'MATH102',1,'What is the problems you see in this course??'); INSERT INTO survey VALUES (2019,'Fall',1,'MATH201',1,'What is the problems you see in this course??'); INSERT INTO survey VALUES (2020,'Spring',1,'MATH201',1,'What is the problems you see in this course??');CREATE OR REPLACE FUNCTION Student_Update() RETURNS trigger AS $$ BEGIN   UPDATE Rates SET  Rates.student_id = inserted.student_id   From deleted,inserted   WHERE Rates.student_id = deleted.student_id;    UPDATE answers    SET answers.student_id = inserted.student_id   From deleted,inserted   WHERE answers.student_id = deleted.student_id;    UPDATE comment    SET comment.student_id = inserted.student_id   From deleted,inserted   WHERE comment.student_id = deleted.student_id;    UPDATE upvote    SET upvote.student_id = inserted.student_id   From deleted,inserted   WHERE upvote.student_id = deleted.student_id;    UPDATE report    SET report.student_id = inserted.student_id   From deleted,inserted   WHERE report.student_id = deleted.student_id;  END; $$ LANGUAGE plpgsql;  CREATE TRIGGER Stu_Upe After Update ON Student FOR EACH ROW EXECUTE PROCEDURE Student_Update();  CREATE FUNCTION Instructor_Update() RETURNS trigger AS $$ BEGIN   UPDATE Section   SET Section.ins_id = inserted.ins_id   From deleted,inserted   WHERE Section.ins_id = deleted.ins_id;  END; $$ LANGUAGE plpgsql;  CREATE TRIGGER Ins_Up After Update ON Instructor FOR EACH ROW EXECUTE PROCEDURE Instructor_Update();